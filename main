import maya.cmds as cmds
import os

##2020 Lopsie Schwartz 
##Encore VFX
##Render presets and AOVs
## 


def initialize_window():
    #Check to see if the window already exists
    if cmds.window("RendermanPresetWindow", exists=True):
        cmds.deleteUI("RendermanPresetWindow")    
    #Create window
    UIwindow = cmds.window("RendermanPresetWindow", title="Renderman Presets", resizeToFitChildren=1, mnb=False, mxb=False, sizeable=True)
    UIDict = {}
    
    UIDict["convertForm"] = cmds.formLayout("Convert")
    UIDict["buttonsLayout"] = cmds.frameLayout(label="AOVs", mh=8)
    cmds.text("Select a show or project, then the type of AOVs you want.", wordWrap=True)
    UIDict["projectMenu"] = cmds.optionMenu(label="Show or Project")
    cmds.menuItem(label="BATW", ann="currently only working item")
    cmds.menuItem(label="CTPJ", ann="for Denys")
    cmds.menuItem(label="DOOM", ann="for Richard")
    cmds.menuItem(label="FLAS", ann="for Shirak")
    cmds.menuItem(label="SUPR", ann="for Galen")
    cmds.menuItem(label="Generic", ann="for the cool kids")
    UIDict["aovType"] = cmds.optionMenu(label="AOV Type")
    cmds.menuItem(label="Generic", ann="the basic AOV set")
    cmds.menuItem(label="Vehicle", ann="for the batmobile specifically") 
   
    UIDict["convertForm"] = cmds.formLayout("Convert")
    UIDict["buttonsLayout"] = cmds.frameLayout(label="Render Quality", mh=8)
    cmds.text("Select the levels of sampling you wish to use for renders", wordWrap=True)
    UIDict["renderQualMenu"] = cmds.optionMenu(label="Renderman Render Level")
    cmds.menuItem(label="Low", ann="current default for LnR wips")
    cmds.menuItem(label="Med", ann="for Goldilocks only")
    cmds.menuItem(label="High", ann="final render quality")
    cmds.menuItem(label="Absurd", ann="it'll never finish rendering")
    
    UIDict["aovBox"] = cmds.checkBox(label="Create AOVs", v=False, annotation="If checked, the AOVs will be created.")
    UIDict["cryptomatteBox"] = cmds.checkBox(label="Create Standard Cryptomattes", v=False, annotation="If checked, Cryptomattes will be generated for Name, Path and Material.")
    UIDict["shadowBox"] = cmds.checkBox(label="Create Shadow Passes", v=True, annotation="If checked, filters will be set to allow for shadow mattes")
    UIDict["renQualBox"] = cmds.checkBox(label="Set Render Quality", v=False, annotation="If checked, the render samples will be set to the quality chosen above.")
    
     

    UIDict["matchFromButton"] = cmds.button(label="Do It!", annotation="Don't press this button yet!",
                                         command=lambda *args: mayaRendermanSettings(cmds.optionMenu(UIDict["projectMenu"], q=True, v=True), 
                                                                                  cmds.optionMenu(UIDict["aovType"], q=True, v=True),
                                                                                  cmds.optionMenu(UIDict["renderQualMenu"], q=True, v=True),
                                                                                  cmds.checkBox(UIDict["aovBox"], q=True, v=True),
                                                                                  cmds.checkBox(UIDict["cryptomatteBox"], q=True, v=True),
                                                                                  cmds.checkBox(UIDict["shadowBox"], q=True, v=True),
                                                                                  cmds.checkBox(UIDict["renQualBox"], q=True, v=True),
                                                                                  get_renderman_settings_attributes()))
    cmds.setParent(u=True)
    cmds.formLayout(UIDict["convertForm"], edit=True, attachForm=[(UIDict["buttonsLayout"], "top", 5), (UIDict["buttonsLayout"], "left", 5)],
                                                    attachPosition=[(UIDict["buttonsLayout"], 'right', 5, 100)])    
    cmds.showWindow(UIwindow)
    
def mayaRendermanSettings(proj, aov, renQ, selAov, selCrypt, selShad, selRQ, foo):
    if proj == "BATW":
        print "good choice on project!"
    elif proj == "Generic":
        print "You're so cool!"
    else: 
        print "like all the rest"
        
    if selRQ:
        set_renderman_render_sample(renQ)
        
def set_renderman_render_sample(renQ):
    print renQ
    
    if renQ == "High":
        cmds.setAttr("rmanGlobals.hider_minSamples", 64)
        cmds.setAttr("rmanGlobals.hider_maxSamples", 1024)
        cmds.setAttr("rmanGlobals.ri_pixelVariance", 0.01)
        print "Render Quality set to High Render Settings"
    elif renQ == "Med":
        cmds.setAttr("rmanGlobals.hider_minSamples", 0)
        cmds.setAttr("rmanGlobals.hider_maxSamples", 256)
        cmds.setAttr("rmanGlobals.ri_pixelVariance", 0.05)
        print "Render Quality set to High Render Settings"
    elif renQ == "Low":
        cmds.setAttr("rmanGlobals.hider_minSamples", 0)
        cmds.setAttr("rmanGlobals.hider_maxSamples", 128)
        cmds.setAttr("rmanGlobals.ri_pixelVariance", 0.1)
        print "Render Quality set to High Render Settings"
    else:
        print "Don't be absurd. This is not an option"
        
def get_renderman_settings_attributes():
    print "This does nothing, but passes out foo \n"
    foo=3
    return foo

initialize_window()
